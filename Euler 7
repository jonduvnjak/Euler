#Can only be divided by itself and 1
#How do you then check whether a number is prime?
#Do you divide it by all numbers less than a half of it?
#I'll need a counter to count how many primes there are
#I'll need to print the 10,001st prime and break
#I'll need to loop until the counter hits 10,001
#I need some way to contain each check of a prime and reset when the check is complete. Righ now as soon as it cannot divide evenly with a single number in the range then it is printing that number
#Each check can stop as soon as it finds a number it can evenly devide by. Once it checks all numbers to 1/2 the prime, if all 
# give uneven di isions then it is a prime.


counter = 0
is_prime = 10

while counter != 100:
  for n in range (2,is_prime//2):
    if is_prime % n == 0:
      is_prime += 1
      break 
    else:
      checker += 1
      print (is_prime)
      counter += 1
      is_prime += 1 
      break
      
      
      




def is_prime(candidate):
    for n in range(2, candidate):
        if candidate % n == 0:
            return False
    return True
    

counter = 1
canditate_prime = 2

while counter != 10002:
  if is_prime(canditate_prime) == False:
      canditate_prime += 1
  else:
    print(canditate_prime)
    if counter == 10001:
      print (canditate_prime)
      break
      #canditate_prime += 1
      #counter += 1
    else:
      canditate_prime += 1
      counter += 1
    

NEW AND UPDATED BY EMIL

def is_prime(primes, candidate):
    for prime in primes:
        if candidate % prime == 0:
            return False
        if prime * prime > candidate:
            break
    return True


candidate = 2
primes = []

while len(primes) < 11:
    if is_prime(primes, candidate):
        primes.append(candidate)
    candidate += 1

print(primes)


NEW NEW NEW

#It first checks whether the candidate number / 
#the primes list  == 0 (one number from the prime list at a time)
#If it does == 0 then it means the candidate can
#can be divided by another number and is not a prime. So false. We only check primes earlier on the list because we don't need to check others. If it does not == 0 then we check whether i*i is greater than the candidate because if it is (and none of the previous calculations equaled 0 (ie: were deivisble)) then we can say that the candidate IS a prime. So we return true.
def is_prime(primes, candidate):
    for i in primes:
        if candidate % i == 0:
            return False
        if i * i > candidate:
            break
    return True


candidate = 2
primes = []

while len(primes) <= 10000:
    if is_prime(primes, candidate):
        primes.append(candidate)
    if candidate >= 3:
      candidate += 2
    else: 
      candidate += 1
print(primes)


  
